{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","name","number","post","id","delete","updatedPerson","put","Filter","searchName","setSearchName","value","onChange","event","target","PersonForm","newName","setNewName","newNumber","setNewNumber","addPerson","focusName","onSubmit","required","autoComplete","ref","type","Persons","persons","deletePerson","length","style","listStyle","padding","filter","person","toLowerCase","includes","map","key","onClick","Notification","message","setMessage","setType","useEffect","timer","setTimeout","clearTimeout","className","App","useState","setPersons","useRef","personService","preventDefault","existingPerson","find","window","confirm","catch","newPerson","concat","current","focus","ReactDOM","render","document","getElementById"],"mappings":"2OAGMA,EAAU,eA0BD,EAvBA,kBACXC,IACKC,IAAIF,GACJG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAoBpB,EAhBA,SAACC,EAAMC,GAAP,OACXN,IACKO,KAAKR,EAAS,CAACM,OAAMC,WACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAapB,EATA,SAAAI,GAAE,OAAIR,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BS,KASjC,EANA,SAACA,EAAIE,GAAL,OACXV,IACKW,IADL,UACYZ,EADZ,YACuBS,GAAME,GACxBR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZpBQ,EAVA,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cACzB,OACI,iDACqB,2BAAOC,MAAOF,EAC3BG,SAAU,SAAAC,GAAK,OAAIH,EAAcG,EAAMC,OAAOH,YCgB/CI,EApBI,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,QAASC,EAA+D,EAA/DA,WAAYC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UAC1E,OACI,0BAAMC,SAAUF,GACZ,sCACU,2BAAOT,MAAOK,EAASJ,SAAU,SAAAC,GAAK,OAAII,EAAWJ,EAAMC,OAAOH,QACpEY,UAAQ,EAACC,aAAa,MAAMC,IAAKJ,KAGzC,wCACY,2BAAOV,MAAOO,EAAWN,SAAU,SAAAC,GAAK,OAAIM,EAAaN,EAAMC,OAAOH,QAC1EY,UAAQ,EAACC,aAAa,SAG9B,6BACI,4BAAQE,KAAK,UAAb,UCKDC,EAnBC,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,QAASnB,EAA8B,EAA9BA,WAAYoB,EAAkB,EAAlBA,aACnC,OACID,EAAQE,OACR,wBAAIC,MAAO,CAACC,UAAW,OAAQC,QAAS,IAEhCL,EAAQM,QAAO,SAAAC,GAAM,OAAIA,EAAOlC,KAAKmC,cAAcC,SAAS5B,EAAW2B,kBACtEE,KAAI,SAAAH,GAAM,OACP,wBAAII,IAAKJ,EAAOlC,MACXkC,EAAOlC,KADZ,IACmBkC,EAAOjC,OAD1B,QAEI,4BAAQsC,QAAS,kBAAMX,EAAaM,EAAO/B,GAAI+B,EAAOlC,QAAtD,eAMhB,mDCSOwC,EAxBM,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,QAAShB,EAA+B,EAA/BA,KAAMiB,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QAc9C,OAXAC,qBAAU,WACN,GAAIH,EAAS,CACT,IAAMI,EAAQC,YAAW,WACrBJ,EAAW,MACXC,EAAQ,MACT,KACH,OAAO,kBAAMI,aAAaF,OAG/B,CAACJ,IAGAA,EACA,yBAAKO,UAAWvB,GACXgB,GAGL,MCkFOQ,G,MAlGH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRvB,EADQ,KACCwB,EADD,OAEgBD,mBAAS,IAFzB,mBAERnC,EAFQ,KAECC,EAFD,OAGoBkC,mBAAS,IAH7B,mBAGRjC,EAHQ,KAGGC,EAHH,OAIsBgC,mBAAS,IAJ/B,mBAIR1C,EAJQ,KAIIC,EAJJ,OAOgByC,mBAAS,MAPzB,mBAORT,EAPQ,KAOCC,EAPD,OAQUQ,mBAAS,IARnB,mBAQRzB,EARQ,KAQFkB,EARE,KAUVvB,EAAYgC,mBAGlBR,qBAAU,WACRS,IAEGxD,KAAKsD,KACP,IAgEH,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcV,QAASA,EAAShB,KAAMA,EAAMiB,WAAYA,EAAYC,QAASA,IAC7E,kBAAC,EAAD,CAAQnC,WAAYA,EAAYC,cAAeA,IAE/C,yCACA,kBAAC,EAAD,CAAYM,QAASA,EAASC,WAAYA,EAAYC,UAAWA,EAAWC,aAAcA,EACxFC,UArEY,SAAAP,GAChBA,EAAM0C,iBAEN,IAAMC,EAAiB5B,EAAQ6B,MAAK,SAAAtB,GAAM,OAAIA,EAAOlC,OAASe,KAG1DwC,EACFE,OAAOC,QAAP,UAAkB3C,EAAlB,4EACAsC,EACUE,EAAepD,GADzB,eACiCoD,EADjC,CACiDtD,OAAQgB,KACtDpB,MAAK,SAAAQ,GACJ8C,EAAWxB,EAAQU,KAAI,SAAAH,GAAM,OAAIA,EAAO/B,KAAOE,EAAcF,GAAKE,EAAgB6B,MAGlFQ,EAAW,WAAD,OAAY3B,EAAZ,cACV4B,EAAQ,QAGR3B,EAAW,IACXE,EAAa,OAEdyC,OAAM,WAGLjB,EAAW,kBAAD,OAAmB3B,EAAnB,8BACV4B,EAAQ,SACRQ,EAAWxB,EAAQM,QAAO,SAAAC,GAAM,OAAIA,EAAO/B,KAAOoD,EAAepD,UAGrEkD,EACUtC,EAASE,GAChBpB,MAAK,SAAA+D,GACJT,EAAWxB,EAAQkC,OAAOD,IAG1BlB,EAAW,SAAD,OAAU3B,IACpB4B,EAAQ,QAGR3B,EAAW,IACXE,EAAa,OAKnBE,EAAU0C,QAAQC,SAwBQ3C,UAAWA,IAGnC,uCACA,kBAAC,EAAD,CAASO,QAASA,EAASnB,WAAYA,EAAYoB,aAxBlC,SAACzB,EAAIH,GACpByD,OAAOC,QAAP,iBAAyB1D,EAAzB,OACFqD,EACUlD,GACPN,MAAK,WACJsD,EAAWxB,EAAQM,QAAO,SAAAC,GAAM,OAAIA,EAAO/B,KAAOA,MAClDuC,EAAW,WAAD,OAAY1C,IACtB2C,EAAQ,iBChFlBqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6f21ba84.chunk.js","sourcesContent":["// Helper functions for communicating with the server using axios\r\n\r\nimport axios from 'axios';\r\nconst baseUrl = '/api/persons';\r\n\r\n// Get all persons in the phonebook\r\nconst getAll = () => (\r\n    axios\r\n        .get(baseUrl)\r\n        .then(response => response.data)\r\n);\r\n\r\n// Add a person to the phonebook\r\nconst create = (name, number) => (\r\n    axios\r\n        .post(baseUrl, {name, number})\r\n        .then(response => response.data)\r\n);\r\n\r\n// Remove a person from the phonebook\r\nconst remove = id => axios.delete(`${baseUrl}/${id}`);\r\n\r\n// Update phone number of an existing person\r\nconst update = (id, updatedPerson) => (\r\n    axios\r\n        .put(`${baseUrl}/${id}`, updatedPerson)\r\n        .then(response => response.data)\r\n);\r\n\r\nexport default {getAll, create, remove, update};","import React from 'react';\r\n\r\n// Component for filtering the phonebook by the searched name\r\n\r\nconst Filter = ({searchName, setSearchName}) => {\r\n    return (\r\n        <div>\r\n            Search for name: <input value={searchName} \r\n                onChange={event => setSearchName(event.target.value)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\n// Component for adding a new person to the phonebook\r\n\r\nconst PersonForm = ({newName, setNewName, newNumber, setNewNumber, addPerson, focusName}) => {\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n                Name: <input value={newName} onChange={event => setNewName(event.target.value)} \r\n                    required autoComplete='off' ref={focusName}\r\n                />\r\n            </div>\r\n            <div>\r\n                Number: <input value={newNumber} onChange={event => setNewNumber(event.target.value)} \r\n                    required autoComplete='off'\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Add</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\n// Component for displaying all the persons in the phonebook\r\n\r\nconst Persons = ({persons, searchName, deletePerson}) => {\r\n    return (\r\n        persons.length ?\r\n        <ul style={{listStyle: 'none', padding: 0}}>\r\n            {\r\n                persons.filter(person => person.name.toLowerCase().includes(searchName.toLowerCase()))\r\n                .map(person => (\r\n                    <li key={person.name}>\r\n                        {person.name} {person.number} &nbsp;\r\n                        <button onClick={() => deletePerson(person.id, person.name)}>Delete</button>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n        :\r\n        <p>Loading contacts...</p>\r\n    );\r\n};\r\n\r\nexport default Persons;\r\n","import React, { useEffect } from 'react';\r\n\r\n// Component to display a notification using the given message (and type, for stylistic purposes)\r\n\r\nconst Notification = ({message, type, setMessage, setType}) => {\r\n\r\n    // Display notification message for 5 seconds\r\n    useEffect(() => {\r\n        if (message) {\r\n            const timer = setTimeout(() => {\r\n                setMessage(null);\r\n                setType('');\r\n            }, 5000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [message]);\r\n\r\n    return (\r\n        message ?\r\n        <div className={type}>\r\n            {message}\r\n        </div>\r\n        :\r\n        null\r\n    );\r\n};\r\n\r\nexport default Notification;","import React, { useState, useRef, useEffect } from 'react';\nimport personService from './services/persons';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\nimport './index.css';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ searchName, setSearchName ] = useState('');\n  \n  // Notification message and its type\n  const [ message, setMessage ] = useState(null);\n  const [ type, setType ] = useState('');\n\n  const focusName = useRef();\n\n  // Fetch persons array from json-server once the component is rendered for the first time\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(setPersons);\n  }, []);\n\n  // Function to add a person to the phonebook\n  const addPerson = event => {\n    event.preventDefault();\n\n    const existingPerson = persons.find(person => person.name === newName);\n\n    // Update person if newName already exists, otherwise add new person\n    if (existingPerson) {\n      window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`) &&\n      personService\n        .update(existingPerson.id, {...existingPerson, number: newNumber})\n        .then(updatedPerson => {\n          setPersons(persons.map(person => person.id === updatedPerson.id ? updatedPerson : person));\n          \n          // Set notification message to be displayed\n          setMessage(`Updated ${newName}'s number`);\n          setType('info');\n\n          // Clear input data\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch(() => {\n          // When a user tries to update an already deleted person\n\n          setMessage(`Information of ${newName} has already been deleted`);\n          setType('error');\n          setPersons(persons.filter(person => person.id !== existingPerson.id));\n        });\n    } else {\n      personService\n        .create(newName, newNumber)\n        .then(newPerson => {\n          setPersons(persons.concat(newPerson));\n\n          // Set notification message to be displayed\n          setMessage(`Added ${newName}`);\n          setType('info');\n\n          // Clear input data\n          setNewName('');\n          setNewNumber('');\n        });\n    }\n\n    // Place focus back on name input\n    focusName.current.focus();\n  };\n\n  // Function to delete a person from the phonebook\n  const deletePerson = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      personService\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== id));\n          setMessage(`Deleted ${name}`);\n          setType('info');\n        });\n    } \n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} type={type} setMessage={setMessage} setType={setType} />\n      <Filter searchName={searchName} setSearchName={setSearchName} />\n\n      <h3>Add a new</h3>\n      <PersonForm newName={newName} setNewName={setNewName} newNumber={newNumber} setNewNumber={setNewNumber}\n        addPerson={addPerson} focusName={focusName}\n      />\n\n      <h3>Numbers</h3>\n      <Persons persons={persons} searchName={searchName} deletePerson={deletePerson} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}